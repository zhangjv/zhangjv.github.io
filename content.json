[{"title":"","date":"2017-05-25T10:04:27.490Z","path":"2017/05/25/debugging-experience/","text":"总结一下代码调试技巧 持续更新 最近在用java做后台oa的项目，我本身对java不够熟悉，遇到报错尤其是错误信息并不直接的报错，根本看不出原因。在这种凭肉眼看不出错误在哪、报错信息模糊、不能断点调试的情况下，逐段注释和逐行注释来确定错误代码位置就很有效果。123456789101112131415INSERT INTO app ( name, package_name, app_id, desc, update_at, update_by) VALUES ( #&#123;name&#125;, #&#123;packageName&#125;, #&#123;appId&#125;, #&#123;desc&#125;, now(), #&#123;updateBy&#125;) mybatis的sql，通过注释发现是desc这个字段的位置有问题，google得知desc果然是mybatis的关键字，改成description结束。","tags":[]},{"title":"js的事件机制","date":"2016-05-26T09:02:34.000Z","path":"2016/05/26/foo/","text":"js的事件机制 通常说js是单线程执行的，这种说法其实会引起疑惑，至少让我疑惑了，既然是单线程，那么事件机制的主体和观察者角色都怎么来解释？ 实际上，所谓单线程是指执行js程序代码的线程只有一个，可以称作主线程。而其他像ajax的请求、dom事件、定时器事件的观察者实现都是其他的线程来完成的，没有包含的主线程之内。 异步操作完成之后要通知主线程，这样才能知道异步操作完成了。这里就需要一个通知机制来告诉主线程异步完成可以执行回调了，这个通知机制的实现就是任务队列和事件循环。主线程需要做的事就是每次从任务队列取出所有，是所有，要执行的任务，按照顺序执行。取出的任务全部执行完毕后再去任务队列中重新取（事件循环）。如果队列中没有任务，主线程就处于停止状态，等待队列中出现新任务。而其他实现观察者的线程负责向队列中push任务。 关于任务队列，有解释说是消息队列，我认为任务这个词更合适一些。 所以当前执行的代码中加入的异步任务，即使是setTimeout 0，这个回调函数也要等到下个事件循环的时候执行了。 ps：vue的dom更新是异步的，会在下一次事件循环的时候执行（ vm.$nextTick(callback)）","tags":[{"name":"javascript","slug":"javascript","permalink":"//zhangjv.github.io/tags/javascript/"}]}]